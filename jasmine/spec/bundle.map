{"version":3,"sources":["webpack:///webpack/bootstrap ce63a770ddd497ef35cf","webpack:///./jasmine/spec/inverted-index-test.js","webpack:///./src/inverted-index.js","webpack:///./jasmine/books.json"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACrCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA,uEAAsE,eAAe;AACrF,UAAS;;AAET,MAAK;;AAEL;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA,UAAS;AACT,MAAK;;;AAGL,EAAC,C;;;;;;ACvED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,cAAa,MAAM;AACnB,cAAa,MAAM;AACnB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,uCAAsC,iBAAiB,GAAG,gBAAgB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,eAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,eAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,MAAM;AACnB,eAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzHA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA,G","file":"ce63a770ddd497ef35cf.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ce63a770ddd497ef35cf","\nconst InvertedIndex = require('../../src/inverted-index');\n\nconst book = require('../books.json');\n\ndescribe('Inverted Index', () => {\n    beforeEach( () => {\n        this.index = new InvertedIndex();\n        this.create = this.index.createIndex(book, 'books');\n        this.getIndex = this.index.getIndex('books');\n    });\n    it('should create an object once a class is instantiated', () => {\n        expect (this.index).toEqual(jasmine.any(Object));\n    });\n\n    describe('Read book data',  () => {\n        const filename = {\n            'name':'file.json',\n        };\n        const filename2 = {\n            'name':'file2.js',\n        }\n        const file = []\n        it('should ensure the file content is actually a valid JSON Array', () => {\n            expect(this.index.isValidFile(filename)).toEqual(true);\n        });\n        it('should ensure the file content is actually a valid JSON Array', () => {\n            expect(this.index.isValidFile(filename)).toEqual(true);\n        });\n        it('should ensure the file is not empty', () => {\n            expect(this.index.isnotEmpty(file)).toEqual('Json file is empty');\n        });\n    });\n\n    describe('Populate Index',  () => {\n        it('should populate the index object once it creates an index',()=>{\n        expect(this.index.getIndex('books').hasOwnProperty('alice')).toBeTruthy();\n        });\n\n        it('verifies that index maps strings to the correct Json objects', () => {\n            expect(this.index.getIndex('books')['alice']).toEqual([0]);;\n        });\n    });\n\n    describe('Search Index',  () => {\n        it('search index of words correctly', () => {\n            expect(this.index.searchIndex('alice', 'books')).toEqual({ alice: [ 0 ] });\n        });\n        \n    })\n\n    describe('Tokenize', () => {\n        it('Removes special characters', () => {\n            expect(this.index.tokenize('alice !!!!, hello, world')).toEqual([ 'alice', 'hello', 'world' ]);\n            expect(this.index.tokenize('Today is **!!')).toEqual([ 'today', 'is']);\n        });\n        it('Removes duplicates', () => {\n            expect(this.index.tokenize('alice , alice, jane')).toEqual(['alice', 'jane']);\n        });\n        it('Creates an array of tokens', () => {\n            expect(this.index.tokenize(book[0].title)).toEqual(['alice', 'in', 'wonderland']);\n        });\n    });\n\n    describe('Get Index', () => {\n        it('returns an object that is an accurate index of the content of the JSON file', () => {\n            expect(this.index.getIndex('books')).toEqual(jasmine.any(Object));\n        });\n    });\n\n    \n})\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./jasmine/spec/inverted-index-test.js\n// module id = 0\n// module chunks = 0","/**\n * Index class\n * @class\n */\nclass InvertedIndex {\n  /**\n   * class constructor\n   * @constructor\n   */\n  constructor() {\n    this.indexes = {};\n  }\n\n  /**\n   * removes special characters, white spaces and duplicates\n   * @function\n   * @param {string} text document title and text\n   * @return {Array} tokens\n   */\n  tokenize(text) {\n    const uniqueWords = [];\n    const token = text.toLowerCase().replace(/[^\\w\\s]/gi, '').match(/\\w+/g);\n    token.forEach((item) => {\n      if (!uniqueWords.includes(item)) {\n        uniqueWords.push(item);\n      }\n    });\n    return uniqueWords;\n  }\n\n  /**\n   * create index\n   * @function\n   * @param {Array} jsonArray objects in an Array\n   * @param {title} title file title\n   * @return {Object} index object\n   */\n  createIndex(jsonArray, title) {\n    this.fileMap = {};\n    jsonArray.forEach((JsonObject, index) => {\n      const tokens = this.tokenize(`${JsonObject.title} ${JsonObject.text}`);\n      tokens.forEach((token) => {\n        if(token in this.fileMap){\n          this.fileMap[token].push(index);\n        }\n        else {\n          this.fileMap[token] = [];\n          this.fileMap[token].push(index);\n        }\n      });\n      this.indexes[title] = this.fileMap\n    });\n    return this.indexes\n  }\n  \n  /**\n   * Get index\n   * @function\n   * @return {Object} index object\n   */\n  getIndex(title) {\n    return this.indexes[title];\n  }\n\n  /**\n   * Search Index\n   * @function\n   * @param {string} query string being searched\n   * @return {Object} search result is returned\n   */\n  searchIndex(query, title) {\n    const result = {};\n    if (query === undefined) {\n      return this.fileMap;\n    }\n    const search = query.split(' ');\n    search.forEach((word) => {\n      if (this.fileMap[word]) {\n        result[word] = this.fileMap[word];\n      }\n    });\n    return Object.keys(result).length > 0 ? result : 'Search Query Not Found';\n  }\n\n  /**\n   * get the number of objects\n   */\n  documentCount(jsonArray) {\n    this.Documents = [];\n    for (const object in jsonArray) {\n      this.Documents.push(parseInt(object));\n    }\n    return this.Documents;\n  }\n\n  /**\n   * isValid\n   * @function\n   * @param {Array} fileContent\n   * @return {boolean} statement is returned\n   */\n  isValid(fileContent) {\n    if (!fileContent[0] && fileContent[0].title) {\n      return false;\n    }\n    return true;\n  }\n\n  isValidFile(file) {\n    if (!file.name.toLowerCase().match(/\\.json$/)) {\n      return false;\n    }\n    return true;\n  }\n  isnotEmpty(file) {\n    if(file[0] === undefined) {\n      return 'Json file is empty';\n    }\n    return true;\n  }\n}\nmodule.exports = InvertedIndex;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/inverted-index.js\n// module id = 1\n// module chunks = 0","module.exports = [\n\t{\n\t\t\"title\": \"Alice in Wonderland\",\n\t\t\"text\": \"Alice falls into a rabbit hole and enters a world full of imagination.\"\n\t},\n\t{\n\t\t\"title\": \"The Lord of the Rings: The Fellowship of the Ring.\",\n\t\t\"text\": \"An unusual alliance of man, elf, dwarf, wizard and hobbit seek to destroy a powerful ring.\"\n\t},\n\t{\n\t\t\"title\": \"Hello its me .\",\n\t\t\"text\": \"I was wondering if after all these .\"\n\t}\n];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./jasmine/books.json\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}