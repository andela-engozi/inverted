{"version":3,"sources":["webpack:///webpack/bootstrap 704f52ee5231bc29a1bc","webpack:///./jasmine/spec/inverted-index-test.js","webpack:///./jasmine/books.json","webpack:///./jasmine/bad.json","webpack:///./jasmine/empty.json","webpack:///./jasmine/valid.json"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACrCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;;AAEL;AACA,uBAAsB;AACtB,wBAAuB;AACvB;AACA,wBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA,uEAAsE,eAAe;AACrF,UAAS;;AAET;AACA,qFAAoF,kCAAkC;AACtH,UAAS;AACT;AACA,qFAAoF,kCAAkC;AACtH,UAAS;AACT;AACA,+FAA8F,SAAS,kCAAkC,WAAW,2BAA2B,GAAG;AAClL,UAAS;;AAET,MAAK;;AAEL;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA,UAAS;AACT,MAAK;;;AAGL,EAAC,E;;;;;;AC1FD;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA,G;;;;;;ACbA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA,G;;;;;;ACTA,qB;;;;;;ACAA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;AACA;AACA;AACA,G","file":"704f52ee5231bc29a1bc.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 704f52ee5231bc29a1bc","\nconst book = require('../books.json');\nconst badFile = require('../bad.json');\nconst empty = require('../empty.json');\nconst valid = require('../valid.json');\n\ndescribe('Inverted Index', () => {\n    beforeEach( () => {\n        this.index = new InvertedIndex();\n        this.create = this.index.createIndex(book, 'books');\n        this.create1 = this.index.createIndex(valid, 'valid');\n        this.getIndex = this.index.getIndex('books');\n    });\n    it('should create an object once a class is instantiated', () => {\n        expect (this.index).toEqual(jasmine.any(Object));\n    });\n\n    describe('Read book data',  () => {\n        const file = {'name': 'book.json',};\n        const file1 = {'name': 'empty.js',};\n        const empty = [];\n        const book = [{'title': 'hello'}];\n        it('should ensure the file content is actually a valid JSON Array', () => {\n            expect(Helper.isValidFile(file)).toEqual(true);\n            expect(Helper.isValidFile(file1)).toEqual(false);\n        });\n        it('should ensure the file is not empty', () => {\n            expect(Helper.isnotEmpty(empty)).toEqual('Json file is empty');\n            expect(Helper.isnotEmpty(book)).toEqual(true);\n        });\n    });\n\n    describe('Populate Index',  () => {\n        it('should ensure the index is created once the JSON file has been read',()=>{\n            expect(this.index.getIndex('books').hasOwnProperty('alice')).toBeTruthy();\n            expect(this.index.getIndex('books').hasOwnProperty('the')).toBeTruthy();\n        });\n\n        it('should ensure index is correct', () => {\n            expect(this.index.getIndex('books')['alice']).toEqual([0]);\n            expect(this.index.getIndex('books')['the']).toEqual([1]);\n            expect(this.index.getIndex('books')['a']).toEqual([0,1]);\n        });\n        it('should return an array that contains the indexes of a word', () => {\n            expect(this.index.getIndex('books').alice).toEqual([0]);\n            expect(this.index.getIndex('books').wonderland).toEqual([0]);\n        });\n\n        it('should ensure index is not overwritten by a new JSON file', () => {\n            expect(Object.keys(this.index.indexes)).toEqual([ 'books', 'valid']);\n        });\n    });\n\n    describe('Search Index',  () => {\n        it('returns the correct index when searched', () => {\n            expect(this.index.searchIndex('books', 'alice')).toEqual({ alice: [ 0 ] });\n        });\n\n        it ('Can handle a varied number of search terms as arguments.', () => {\n            expect(this.index.searchIndex('books', 'alice', 'wonderland')).toEqual({ alice: [ 0 ], wonderland: [ 0 ] });\n        });\n        it('should return an array of search terms', ()=> {\n            expect(this.index.searchIndex('books',['alice', 'wonderland']).toEqual({ alice: [ 0 ], wonderland: [ 0 ] }));\n        });\n        it ('Goes through all indexed files if a filename is not passed', () => {\n            expect(this.index.searchAllfiles('alice', 'wonderland', 'some', 'hill')).toEqual({ books:({ alice: [ 0 ], wonderland: [ 0 ] }), valid:({ some: [ 0 ], hill: [ 0 ] }) });\n        });\n        \n    });\n\n    describe('Tokenize', () => {\n        it('Removes special characters', () => {\n            expect(Helper.tokenize('alice !!!!, hello, world')).toEqual([ 'alice', 'hello', 'world' ]);\n            expect(Helper.tokenize('Today is **!!')).toEqual([ 'today', 'is']);\n        });\n        it('Removes duplicates', () => {\n            expect(Helper.tokenize('alice , alice, jane')).toEqual(['alice', 'jane']);\n        });\n        it('Creates an array of tokens', () => {\n            expect(Helper.tokenize(book[0].title)).toEqual(['alice', 'in', 'wonderland']);\n        });\n    });\n\n    describe('Get Index', () => {\n        it('returns an object that is an accurate index of the content of the JSON file', () => {\n            expect(this.index.getIndex('books')).toEqual(jasmine.any(Object));\n        });\n    });\n\n    \n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./jasmine/spec/inverted-index-test.js\n// module id = 0\n// module chunks = 0","module.exports = [\n\t{\n\t\t\"title\": \"Alice in Wonderland\",\n\t\t\"text\": \"Alice falls into a rabbit hole and enters a world full of imagination.\"\n\t},\n\t{\n\t\t\"title\": \"The Lord of the Rings: The Fellowship of the Ring.\",\n\t\t\"text\": \"An unusual alliance of man, elf, dwarf, wizard and hobbit seek to destroy a powerful ring.\"\n\t},\n\t{\n\t\t\"title\": \"Hello its me .\",\n\t\t\"text\": \"I was wondering if after all these .\"\n\t}\n];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./jasmine/books.json\n// module id = 1\n// module chunks = 0","module.exports = {\n\t\"file1\": {\n\t\t\"title\": \"Alice in Wonderland\",\n\t\t\"text\": \"Alice falls into a rabbit hole and enters a world full of imagination.\"\n\t},\n\t\"file2\": {\n\t\t\"title\": \"The Lord of the Rings: The Fellowship of the Ring.\",\n\t\t\"text\": \"An unusual alliance of man, elf, dwarf, wizard and hobbit seek to destroy a powerful ring.\"\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./jasmine/bad.json\n// module id = 2\n// module chunks = 0","module.exports = [];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./jasmine/empty.json\n// module id = 3\n// module chunks = 0","module.exports = [\n\t{\n\t\t\"title\": \"The hill\",\n\t\t\"text\": \"Some may trust in\"\n\t},\n\t{\n\t\t\"title\": \"Travis\",\n\t\t\"text\": \"The travis in CI is not in.\"\n\t}\n];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./jasmine/valid.json\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}